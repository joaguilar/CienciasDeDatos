ylab("Ventas Totales") +
ggtitle("Ventas totales por día")
p
por_pais <- retail %>%
group_by(Country) %>%
summarise_at(vars(Total),funs(sum(.))) %>%
arrange(desc(Total))
pp<-ggplot(data=head(por_pais,10), aes(x=Country,y=Total)) +
geom_bar(stat="identity") +
scale_y_continuous(name="Ventas totales (£)", labels = scales::comma) +
ggtitle("Ventas totales por País")
pp
por_cantidad <- retail %>%
group_by(Country) %>%
summarise_at(vars(Quantity),funs(sum(.))) %>%
arrange(desc(Quantity))
pp<-ggplot(data=head(por_cantidad,10), aes(x=Country,y=Quantity)) +
geom_bar(stat="identity") +
scale_y_continuous(name="Ventas totales (Cantidad)", labels = scales::comma) +
ggtitle("Ventas totales (cantidad) por País")
pp
numclientesna <- count(is.na(retail$CustomerID))
library(ggplot2)
tmp_clientes<-data.frame(IdValido=c("Si", "No"), conteo=c(numclientesna[1,2],numclientesna[2,2]), index=1)
ggplot(tmp_clientes,aes(IdValido,conteo)) +
geom_col(stat="identity")+
scale_y_continuous(name="Observaciones", labels = scales::comma) +
labs(x="Identificador valido de cliente?")+
ggtitle("NA's en el campo CustomerID") +
geom_text(aes(label=conteo))
boxplot(retail$Quantity,data=retail,main="Datos de Quantity")
boxplot(retail$UnitPrice,data=retail,main="Datos de UnitPrice")
UnitPrice_Positivos<- nrow(retail[retail$UnitPrice >= 0,])
UnitPrice_Positivos
UnitPrice_Negativos<- nrow(retail[retail$UnitPrice < 0,])
UnitPrice_Negativos
kable(head(retail[retail$UnitPrice < 0,],10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
Quantity_Positivos<- nrow(retail[retail$Quantity >= 0,])
Quantity_Positivos
Quantity_Negativos<- nrow(retail[retail$Quantity < 0,])
Quantity_Negativos
kable(head(retail[retail$Quantity < 0,]),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
datos_ge <- retail
summary(datos_ge)
kable(head(datos_ge[datos_ge$UnitPrice < 0,],10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
retail <- datos_ge[!(datos_ge$UnitPrice < 0),]
kable(head(datos_ge[datos_ge$UnitPrice < 0,],10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
kable(head(datos_ge[datos_ge$Quantity < 0,]),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
datos_ge <- datos_ge[!(datos_ge$Quantity < 0),]
kable(head(datos_ge[datos_ge$Quantity < 0,],10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
datos_ge <- datos_ge %>% drop_na(CustomerID, Description)
summary(datos_ge)
historic_invoices <- datos_ge %>%
group_by(InvoiceDay,CustomerID) %>%
summarise_at(vars(Total),funs(sum(.)))
kable(head(historic_invoices,10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
clientes_pais <- datos_ge %>%
distinct(CustomerID, Country) %>%
distinct(CustomerID, .keep_all = TRUE)
head(clientes_pais)
# Se procede a obtener la fecha de la ultima compra.
ultima_compra <- historic_invoices %>%
group_by(CustomerID) %>%
summarise_at(vars(InvoiceDay),funs(max(.)))
kable(head(ultima_compra,10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
colnames(ultima_compra)= c('CustomerID','UltimaCompra')
length(unique(historic_invoices$CustomerID))
length(unique(ultima_compra$CustomerID))
visitas_por_cliente <- historic_invoices %>%
group_by(CustomerID) %>%
summarise_at(vars(InvoiceDay),funs(n_distinct(.)))
colnames(visitas_por_cliente)<- c('CustomerID','CantidadVisitas')
kable(head(visitas_por_cliente,10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
length(unique(visitas_por_cliente$CustomerID))
#historic_invoices
#datos <- merge(historic_invoices, ultima_compra, by="CustomerID")
#datos2 <- merge(datos, visitas_por_cliente, by="CustomerID")
#head(datos)
#head(datos2)
total_por_cliente <- historic_invoices  %>%
group_by(CustomerID) %>%
summarise_at(vars(Total),funs(sum(.)))
kable(head(total_por_cliente,10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
length(unique(total_por_cliente$CustomerID))
#Se calcula la recency
#datos['Recency'] <- as.numeric(difftime(datos$UltimaCompra ,datos$InvoiceDay , units = c("days")))
ultima_compra$Recency <- as.numeric(difftime(max(ultima_compra$UltimaCompra) ,ultima_compra$UltimaCompra , units = c("days")))
head(ultima_compra)
summary(ultima_compra)
hist(ultima_compra$Recency,
main = 'Distribución de las frecuencia de las visitas',
ylab = 'Observaciones',
xlab = 'Cantidad de dias')
datos <-  merge(ultima_compra, visitas_por_cliente, by="CustomerID")
datos <- merge(datos,total_por_cliente, by="CustomerID")
head(datos)
analysis_date <- lubridate::as_date("2006-12-31", tz = "UTC")
#rfm_result <- rfm_table_order(datos,
#                              customer_id=CustomerID,
#                              order_date=UltimaCompra,
#                              revenue=Total,
#                              max(datos$UltimaCompra))
rfm_result <- rfm_table_order(historic_invoices,
customer_id=CustomerID,
order_date=InvoiceDay,
revenue=Total,
max(historic_invoices$InvoiceDay))
#summary(rfm_result)
rfm_result
rfm_clustering<-rfm_result$rfm[,c("recency_days","transaction_count","amount")]
rfm_clustering <- na.omit(rfm_clustering)
str(rfm_clustering)
clusters_kmedoids<-pam(rfm_clustering,3)
resultado_medoids <- data.frame(clusters_kmedoids$cluster,rfm_result$rfm)
head(resultado_medoids,20)
# cálculo del score Silhouette
score_sil<- silhouette(clusters_kmedoids,daisy(rfm_clustering))
# cálculo del valor óptimo de k usando el score silhouette
fviz_nbclust(rfm_clustering,pam,method = 'silhouette',k.max = 10)
# cálculo del valor óptimo de k usando el método del codo
fviz_nbclust(rfm_clustering,pam,method = 'wss',k.max = 10)
# cálculo del valor óptimo de k usando la estadística gap
#fviz_nbclust(rfm_clustering,pam,method = 'gap_stat',k.max = 10)
# cluster al que se asignó cada individuo
clusteres_medoids <- clusters_kmedoids$clustering
#clusteres_medoids
# Descripción de los clusters
medoids <- clusters_kmedoids$medoids
medoids_df <- data.frame(cluster=c("1","2","3"),clusters_kmedoids$medoids, stringsAsFactors = FALSE)
medoids_df$Tecnica<-"KMedoids"
kable(medoids_df,"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
medoids_df
# visualización de los clusters
fviz_cluster(clusters_kmedoids,data=rfm_clustering,palette='jco')
clusters_df<-data.frame(clusters=clusters_kmedoids$clustering)
ggplot(clusters_df,aes(clusters)) +
geom_bar()+
scale_y_continuous(name="Numero de Clientes", labels = scales::comma) +
labs(x="Cluster Asignado")+
ggtitle("Clientes por Cluster")
clusters <- kmeans(rfm_clustering,3,nstart=20)
clusteres_kmeans <- clusters$cluster
# crear un data frame combinando el cluster asignado y los atributos originales
resultado_kmeans <- data.frame(clusters$cluster,rfm_clustering)
head(resultado_kmeans)
#obtener cantidad de registros en cada cluster y los centroides
centroides<- data.frame(clusters$size,clusters$centers)
centroides$Tecnica<-"KMeans"
centroides$clusters.size<-NULL
centroides$cluster<-rownames(centroides)
centroides
ggplot(rfm_clustering,aes(rfm_clustering$recency_days,rfm_clustering$amount, color = clusters$cluster)) + geom_point()+
ggtitle(label='Distribución por cluster Antiguedad vs Monto de Compras') +
scale_color_viridis(option = "D") +
labs(y="Monto de las transacciones",x="Dias desde la compra más reciente")
ggplot(rfm_clustering,aes(rfm_clustering$transaction_count,rfm_clustering$amount, color = clusters$cluster)) + geom_point()+
ggtitle(label='Distribución por cluster Monto de Compras vs Cantidad de Compras') +
scale_color_viridis(option = "D") +
labs(y="Monto de las transacciones",x="Numero de compras totales")
ggplot(rfm_clustering,aes(rfm_clustering$recency_days,rfm_clustering$transaction_count, color = clusters$cluster)) + geom_point()+
ggtitle(label='Distribución por cluster Antiguedad vs Cantidad de Compras') +
scale_color_viridis(option = "D") +
labs(y="Numero de compras totales",x="Dias desde la compra más reciente")
# otra forma de visualizar los clusters
fviz_cluster(clusters,data=rfm_clustering,palette='jco',ggtheme = theme_minimal())
clusters_dfkmeans<-data.frame(clusters=clusters$cluster)
ggplot(clusters_dfkmeans,aes(clusters)) +
geom_bar()+
scale_y_continuous(name="Numero de Clientes", labels = scales::comma) +
labs(x="Cluster Asignado")+
ggtitle("Clientes por Cluster")
export_df<-rfm_result$rfm
export_df$kmedoids<-clusters_kmedoids$clustering
export_df$kmeans<-clusters$cluster
head(export_df)
summary(export_df)
export_df<- merge(x=export_df,y=clientes_pais,by.x="customer_id",by.y="CustomerID")
head(export_df)
summary(export_df)
export_df<-export_df %>%
mutate(kmeans = replace(kmeans, kmeans == 1, "2 Medio Valor")) %>%
mutate(kmeans = replace(kmeans, kmeans == 3, "1 Alto Valor")) %>%
mutate(kmeans = replace(kmeans, kmeans == 2, "3 Bajo Valor")) %>%
mutate(kmedoids = replace(kmedoids, kmedoids == 2, "2 Medio Valor")) %>%
mutate(kmedoids = replace(kmedoids, kmedoids == 1, "1 Alto Valor")) %>%
mutate(kmedoids = replace(kmedoids, kmedoids == 3, "3 Bajo Valor"))
write.csv(export_df,"resultado_cluster.csv")
centroides2<-centroides %>%
mutate(cluster = replace(cluster, cluster == "1", "2 Medio Valor")) %>%
mutate(cluster = replace(cluster, cluster == "3", "1 Alto Valor")) %>%
mutate(cluster = replace(cluster, cluster == "2", "3 Bajo Valor"))
medoids_df2 <- medoids_df %>%
mutate(cluster = replace(cluster, cluster == "2", "2 Medio Valor")) %>%
mutate(cluster = replace(cluster, cluster == "1", "1 Alto Valor")) %>%
mutate(cluster = replace(cluster, cluster == "3", "3 Bajo Valor"))
export_clusters <- rbind(medoids_df2,centroides2)
write.csv(export_clusters,"centros_clusters.csv")
mdf<-medoids_df2
mdf$Tecnica<-NULL
colnames(mdf)<-c("Segmento","Antiguedad","Cantidad de Transacciones","Montos")
kable(mdf,"html", booktabs = T)%>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F, position = "left")
retail$YearMonth <- format(as.Date(retail$InvoiceDay), "%Y-%m")
compras <- retail %>%
group_by(InvoiceDay) %>%
summarise_at(vars(Total),funs(sum(.)))
colnames(compras) <- c('Fecha','ventas')
kable(head(compras,10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
ggplot(data=compras, aes(x=Fecha, y=ventas, group=1)) +
geom_line()+
geom_point() +
labs(x="Mes de Compra")+
ggtitle("Comportamiento mensual de las ventas")
compras_diferencia <- compras
compras_diferencia['ventas_previas'] <- shift(compras_diferencia$ventas,n=1,fill=0)
compras_diferencia <- na.omit(compras_diferencia)
# se procede a calcular la diferencia
compras_diferencia['diff'] <- compras_diferencia$ventas - compras_diferencia$ventas_previas
for (inc in 0:12){
field_name = paste('lag',toString(inc),sep = '')
compras_diferencia[field_name] <- shift(compras_diferencia$diff,n=inc,fill=0)
}
compras_diferencia <- na.omit(compras_diferencia)
colnames(compras_diferencia) <- c('Fecha', 'Ventas', 'Ventas_previas', 'diff', 'lag1','lag2','lag3','lag4','lag5','lag6','lag7','lag8','lag9','lag10','lag11','lag12','lag13')
#Se particiona el dataset en entrenamiento y prueba.
#entrenamiento = compras_diferencia[compras_diferencia$Fecha <= '2011-10-31',]
#prueba  = compras_diferencia[compras_diferencia$Fecha >= '2011-10-31',]
sample = sample.split(compras_diferencia$Ventas, SplitRatio = .75)
entrenamiento = subset(compras_diferencia, sample == TRUE)
prueba  = subset(compras_diferencia, sample == FALSE)
cor(entrenamiento[4:17])
#Se crea la regresion lineal simple para la diferencia de las ventas
modelo.simple <- lm(Ventas ~ lag1, data = entrenamiento)
#ver detalle del modelo
summary(modelo.simple)
# Ver distribución de los residuos del modelo
plot(x = entrenamiento$Ventas,
y = modelo.simple$residuals,
main = 'Residuos del Modelo de regresión simple en entrenamiento',
xlab = 'Valor',
ylab = 'Residuos')
ggplot(aes(x=entrenamiento$Ventas,y = modelo.simple$residuals)) +
geom_point(size=2) +
labs(x="Valor",y="Residuos")+
ggtitle("Residuos del Modelo de regresión simple en entrenamiento")+
scale_y_continuous(labels = scales::comma) +
# Ver distribución de los residuos del modelo
plot(x = entrenamiento$Ventas,
y = modelo.simple$residuals,
main = 'Residuos del Modelo de regresión simple en entrenamiento',
xlab = 'Valor',
ylab = 'Residuos')
ggplot(aes(x=entrenamiento$Ventas,y = modelo.simple$residuals)) +
geom_point(size=2) +
labs(x="Valor",y="Residuos")+
ggtitle("Residuos del Modelo de regresión simple en entrenamiento")+
scale_y_continuous(labels = scales::comma)
# Ver distribución de los residuos del modelo
plot(x = entrenamiento$Ventas,
y = modelo.simple$residuals,
main = 'Residuos del Modelo de regresión simple en entrenamiento',
xlab = 'Valor',
ylab = 'Residuos')
ggplot(entrenamiento,aes(x=entrenamiento$Ventas,y = modelo.simple$residuals)) +
geom_point(size=2) +
labs(x="Valor",y="Residuos")+
ggtitle("Residuos del Modelo de regresión simple en entrenamiento")+
scale_y_continuous(labels = scales::comma)
#Se realizan las predicciones empleando el conjunto de datos de entrenamiento.
entrenamiento$Prediccion <- predict(modelo.simple)
# predecir valores de diff en el conjunto de datos de prueba
prueba$Prediccion <- predict(modelo.simple, newdata = prueba)
confint(modelo.simple)
#Residual Standard Error (RSE)
sigma(modelo.simple)/mean(prueba$Ventas)
entrenamiento$Observacion <- 'entrenamiento'
prueba$Observacion <- 'prueba'
resultados_rs <- rbind(entrenamiento,prueba)
resultados_rs$Modelo <- 'Regresión Simple'
plot1 <- ggplot(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1)) +
geom_line()+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Reales")
plot2 <- ggplot(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1)) +
geom_line()+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Predicion")
grid.arrange(plot1, plot2)
#plot(x = entrenamiento$Fecha, y = entrenamiento$diff,
#     main = 'Ventas Mensuales Reales',
#     xlab = 'Fecha',
#     ylab = 'Ventas totales mensuales', type="o" ,col = "red")
#lines(entrenamiento$Prediccion, type = "o", col = "blue")
#plot(x = entrenamiento$Fecha, y = entrenamiento$Prediccion,
#     main = 'Ventas Mensuales Predicion',
#     xlab = 'Fecha',
#     ylab = 'Ventas totales mensuales', type="o" ,col = "blue")
#lines(entrenamiento$Prediccion, type = "o", col = "blue")
p <- ggplot() +
geom_line(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1),color = "blue") +
geom_line(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1), color = "green")+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Reales")
p
p <- ggplot() +
geom_line(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1),color = "blue") +
geom_line(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1), color = "red")+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Reales")
p
p <- ggplot() +
geom_line(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1),color = "yellow") +
geom_line(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1), color = "red")+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Reales")
p
p <- ggplot() +
geom_line(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1),color = "darkyellow") +
geom_line(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1), color = "red")+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Reales")
p
p <- ggplot() +
geom_line(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1)) +
geom_line(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1))+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Reales")+
scale_colour_manual("",labels = c("Ventas", "Predicción"), values = c("blue", "red")) +
p
p <- ggplot() +
geom_line(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1)) +
geom_line(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1))+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Reales")+
scale_colour_manual("",labels = c("Ventas", "Predicción"), values = c("blue", "red"))
p
p <- ggplot() +
geom_line(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1, colour = "Ventas")) +
geom_line(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1, colour = "Predicción"))+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Reales")+
scale_colour_manual("",labels = c("Ventas", "Predicción"), values = c("blue", "red"))
p
#plot1 <- ggplot(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1)) +
#  geom_line()+
#  geom_point()+
#  labs(x="Mes de Compra")+
#  ggtitle("Ventas Mensuales Reales")
#plot2 <- ggplot(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1)) +
#  geom_line()+
#  geom_point()+
#  labs(x="Mes de Compra")+
#  ggtitle("Ventas Mensuales Predicion")
#grid.arrange(plot1, plot2)
p <- ggplot() +
geom_line(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1, colour = "Ventas")) +
geom_line(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1, colour = "Predicción"))+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Reales")+
scale_colour_manual("",labels = c("Ventas", "Predicción"), values = c("blue", "red"))
p
#plot1 <- ggplot(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1)) +
#  geom_line()+
#  geom_point()+
#  labs(x="Mes de Compra")+
#  ggtitle("Ventas Mensuales Reales")
#plot2 <- ggplot(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1)) +
#  geom_line()+
#  geom_point()+
#  labs(x="Mes de Compra")+
#  ggtitle("Ventas Mensuales Predicion")
#grid.arrange(plot1, plot2)
p <- ggplot() +
geom_line(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1, colour = "Ventas")) +
geom_line(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1, colour = "Predicción"))+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Reales")+
scale_colour_manual("",labels = c("Ventas", "Predicción"), values = c("blue", "red"))
p
#plot1 <- ggplot(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1)) +
#  geom_line()+
#  geom_point()+
#  labs(x="Mes de Compra")+
#  ggtitle("Ventas Mensuales Reales")
#plot2 <- ggplot(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1)) +
#  geom_line()+
#  geom_point()+
#  labs(x="Mes de Compra")+
#  ggtitle("Ventas Mensuales Predicion")
#grid.arrange(plot1, plot2)
p <- ggplot() +
geom_line(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1, colour = "Ventas")) +
geom_line(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1, colour = "Predicción"))+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Comparación de Ventas Mensuales Reales vs Predicción")+
scale_colour_manual("",labels = c("Ventas", "Predicción"), values = c("blue", "red"))
p
#Para la creación del modelo 1 se empezará por un modelo "completo"
modelo.multiple0 <- lm(Ventas ~ lag1 + lag2 + lag3 + lag4 + lag5 + lag6 + lag7, data = entrenamiento)
# ver el detalle del resumen
summary(modelo.multiple0)
# Ver distribución de los residuos del modelo
par(mfrow = c(1,2))
plot(x = entrenamiento$Ventas,
y = modelo.multiple0$residuals,
main = 'Residuos del Modelo de Regresión Múltiple entrenamiento',
xlab = 'Valor',
ylab = 'Residuos')
#Predicción usando los datos de entrenamiento.
entrenamiento$Prediccion <- predict(modelo.multiple0)
# predecir valores de la diferencia de compras usando el dataset de pruebas
prueba$Prediccion <- predict(modelo.multiple0, newdata = prueba[,4:15])
#entrenamiento[,c(1,4,18)]
#prueba[,c(1,4,18)]
plot1 <- ggplot(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1)) +
geom_line()+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Reales")
plot2 <- ggplot(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1)) +
geom_line()+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Predición - Regresión Múltiple")
grid.arrange(plot1, plot2)
p <- ggplot() +
geom_line(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1, colour = "Ventas")) +
geom_line(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1, colour = "Predicción"))+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Comparación de Ventas Mensuales Reales vs Predicción")+
scale_colour_manual("",labels = c("Ventas", "Predicción"), values = c("blue", "red"))
p
#Predicción usando los datos de entrenamiento.
entrenamiento$Prediccion <- predict(modelo.multiple0)
# predecir valores de la diferencia de compras usando el dataset de pruebas
prueba$Prediccion <- predict(modelo.multiple0, newdata = prueba[,4:15])
#entrenamiento[,c(1,4,18)]
#prueba[,c(1,4,18)]
plot1 <- ggplot(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1)) +
geom_line()+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Reales")
plot2 <- ggplot(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1)) +
geom_line()+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Ventas Mensuales Predición - Regresión Múltiple")
grid.arrange(plot1, plot2)
p <- ggplot() +
geom_line(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1, colour = "Ventas")) +
geom_line(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1, colour = "Predicción"))+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Comparación de Ventas Mensuales Reales vs Predicción")+
scale_colour_manual("",labels = c("Ventas", "Predicción"), values = c("blue", "red"))
p
confint(modelo.multiple0)
#Residual Standard Error (RSE)
sigma(modelo.multiple0)/mean(prueba$Ventas)
# Ver distribución de los residuos del modelo
par(mfrow = c(1,2))
plot(x = entrenamiento$Ventas,
y = modelo.multiple0$residuals,
main = 'Residuos del Modelo de Regresión Múltiple entrenamiento',
xlab = 'Valor',
ylab = 'Residuos')
ggplot(entrenamiento,aes(x=entrenamiento$Ventas,y = modelo.multiple0$residuals)) +
geom_point(size=2) +
labs(x="Valor",y="Residuos")+
ggtitle("Residuos del Modelo de regresión simple en entrenamiento")+
scale_y_continuous(labels = scales::comma)
# Ver distribución de los residuos del modelo
ggplot(entrenamiento,aes(x=entrenamiento$Ventas,y = modelo.multiple0$residuals)) +
geom_point(size=2) +
labs(x="Valor",y="Residuos")+
ggtitle("Residuos del Modelo de Regresión Múltiple entrenamiento")+
scale_y_continuous(labels = scales::comma) +
scale_x_continuous(labels = scales::comma)
p <- ggplot() +
geom_line(data=entrenamiento, aes(x=Fecha, y=Ventas, group=1, colour = "Ventas")) +
geom_line(data=entrenamiento, aes(x=Fecha, y=Prediccion, group=1, colour = "Predicción"))+
geom_point()+
labs(x="Mes de Compra")+
ggtitle("Comparación de Ventas Mensuales Reales vs Predicción")+
scale_colour_manual("",labels = c("Ventas", "Predicción"), values = c("blue", "red"))
p
