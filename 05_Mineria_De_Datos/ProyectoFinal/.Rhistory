x<-res$points[,1]
y<-res$points[,2]
plot(x,y,xlab="Componente 1", ylab="Componente 2", main="Plano principal ACP Escalamiento Multidimensional", type="n" )
text(x,y,labels = row.names(bankadditional),cex=.7)
setwd("E:/OneDrive/ITCR/Ciencias de Datos/GIT/CienciasDeDatos/05_Mineria_De_Datos/ProyectoFinal")
knitr::opts_chunk$set(echo = TRUE)
if(!require(arules)) install.packages("arules",dependencies = TRUE)
library(arules)
if(!require(readxl)) install.packages("readxl",dependencies = TRUE)
library("readxl")
library(ggplot2)
library(knitr)
if(!require(kableExtra)) install.packages("kableExtra",dependencies = TRUE)
library(kableExtra)
library(arules)
library(arulesViz)
library(tidyverse)
if(!require(plyr)) install.packages("plyr",dependencies = TRUE)
library(plyr)
library(dplyr)
library(ggplot2)
library(knitr)
library(lubridate)
if(!require(assertr)) install.packages("assertr",dependencies = TRUE)
library(assertr)
if(!require(reshape2)) install.packages("reshape2",dependencies = TRUE)
library(reshape2)
#Librerias de Clustering
if(!require(cluster)) install.packages("cluster",dependencies = TRUE)
library(cluster)
if(!require(factoextra)) install.packages("factoextra",dependencies = TRUE)
library(factoextra)
if(!require(caTools)) install.packages("caTools",dependencies = TRUE)
library(caTools)
if(!require(rfm)) install.packages("rfm",dependencies = TRUE)
library(rfm)
if(!require(data.table)) install.packages("data.table",dependencies = TRUE)
library(data.table)
#Se establece el seed.
if(!require(viridis)) install.packages("viridis",dependencies = TRUE)
library(viridis)
set.seed(100)
atributos<-read.csv('riesgos.csv', sep = ',',dec = '.')
kable(atributos[,0:3],caption = "Riesgos y Contingencias")%>%
kable_styling(bootstrap_options = c("striped", "hover"))
atributos<-read.csv('plan_proyecto.csv', sep = ',',dec = '.',encoding = "UTF-8")
kable(atributos[,0:5],caption = "Plan de Proyecto")%>%
kable_styling(bootstrap_options = c("striped", "hover"))
atributos<-read.csv('atributos.csv', sep = ',',dec = '.')
kable(atributos[,0:3],caption = "Descripción de atributos")%>%
kable_styling(bootstrap_options = c("striped", "hover"))
retail<-read_excel("Online Retail.xlsx")
knitr::opts_chunk$set(echo = TRUE)
if(!require(arules)) install.packages("arules",dependencies = TRUE)
library(arules)
if(!require(readxl)) install.packages("readxl",dependencies = TRUE)
library("readxl")
library(ggplot2)
library(knitr)
if(!require(kableExtra)) install.packages("kableExtra",dependencies = TRUE)
library(kableExtra)
library(arules)
library(arulesViz)
library(tidyverse)
if(!require(plyr)) install.packages("plyr",dependencies = TRUE)
library(plyr)
library(dplyr)
library(ggplot2)
library(knitr)
library(lubridate)
if(!require(assertr)) install.packages("assertr",dependencies = TRUE)
library(assertr)
if(!require(reshape2)) install.packages("reshape2",dependencies = TRUE)
library(reshape2)
#Librerias de Clustering
if(!require(cluster)) install.packages("cluster",dependencies = TRUE)
library(cluster)
if(!require(factoextra)) install.packages("factoextra",dependencies = TRUE)
library(factoextra)
if(!require(caTools)) install.packages("caTools",dependencies = TRUE)
library(caTools)
if(!require(rfm)) install.packages("rfm",dependencies = TRUE)
library(rfm)
if(!require(data.table)) install.packages("data.table",dependencies = TRUE)
library(data.table)
#Se establece el seed.
if(!require(viridis)) install.packages("viridis",dependencies = TRUE)
library(viridis)
set.seed(100)
atributos<-read.csv('riesgos.csv', sep = ',',dec = '.')
kable(atributos[,0:3],caption = "Riesgos y Contingencias")%>%
kable_styling(bootstrap_options = c("striped", "hover"))
atributos<-read.csv('plan_proyecto.csv', sep = ',',dec = '.',encoding = "UTF-8")
kable(atributos[,0:5],caption = "Plan de Proyecto")%>%
kable_styling(bootstrap_options = c("striped", "hover"))
atributos<-read.csv('atributos.csv', sep = ',',dec = '.')
kable(atributos[,0:3],caption = "Descripción de atributos")%>%
kable_styling(bootstrap_options = c("striped", "hover"))
retail<-read_excel("Online Retail.xlsx")
summary(retail)
retail$Total <- retail$UnitPrice * retail$Quantity
retail$InvoiceDay <- as.Date(format(retail$InvoiceDate,"%Y-%m-%d"))
retail$StockCode <- as.factor(retail$StockCode)
retail$Description <- as.factor(retail$Description)
retail$Country <- as.factor(retail$Country)
retail$CustomerID <- as.factor(retail$CustomerID)
por_cliente <- retail[!is.na(retail$CustomerID),] %>%
group_by(CustomerID) %>%
summarise_at(vars(Total),funs(sum(.))) %>%
arrange(desc(Total))
pp<-ggplot(data=head(por_cliente,10), aes(x=CustomerID,y=Total)) +
geom_bar(stat="identity") +
scale_y_continuous(name="Total Sales (£)", labels = scales::comma)
pp
#Agrupamos por productos:
un_cliente_productos <- subset(retail, CustomerID==14646) %>%
group_by(StockCode,Description) %>%
summarise_at(vars(Quantity,Total),list(~sum(.))) %>%
arrange(desc(Total))
un_cliente_totales<-sum(un_cliente_productos$Total)
un_cliente_productos_diferentes<-nrow(un_cliente_productos)
print(un_cliente_totales)
print(un_cliente_productos_diferentes)
kable(head(un_cliente_productos,10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
invoices <- retail %>%
group_by(InvoiceDay) %>%
summarise_at(vars(Total),funs(sum(.)))
kable(head(invoices,10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
p <- ggplot(invoices, aes(x=InvoiceDay, y=Total)) +
geom_line() +
xlab("Fecha") +
ylab("Ventas Totales") +
ggtitle("Ventas totales por día")
p
por_pais <- retail %>%
group_by(Country) %>%
summarise_at(vars(Total),funs(sum(.))) %>%
arrange(desc(Total))
pp<-ggplot(data=head(por_pais,10), aes(x=Country,y=Total)) +
geom_bar(stat="identity") +
scale_y_continuous(name="Ventas totales (£)", labels = scales::comma) +
ggtitle("Ventas totales por País")
pp
por_cantidad <- retail %>%
group_by(Country) %>%
summarise_at(vars(Quantity),funs(sum(.))) %>%
arrange(desc(Quantity))
pp<-ggplot(data=head(por_cantidad,10), aes(x=Country,y=Quantity)) +
geom_bar(stat="identity") +
scale_y_continuous(name="Ventas totales (Cantidad)", labels = scales::comma) +
ggtitle("Ventas totales (cantidad) por País")
pp
numclientesna <- count(is.na(retail$CustomerID))
library(ggplot2)
tmp_clientes<-data.frame(IdValido=c("Si", "No"), conteo=c(numclientesna[1,2],numclientesna[2,2]), index=1)
ggplot(tmp_clientes,aes(IdValido,conteo)) +
geom_col(stat="identity")+
scale_y_continuous(name="Observaciones", labels = scales::comma) +
labs(x="Identificador valido de cliente?")+
ggtitle("NA's en el campo CustomerID") +
geom_text(aes(label=conteo))
boxplot(retail$Quantity,data=retail,main="Datos de Quantity")
boxplot(retail$UnitPrice,data=retail,main="Datos de UnitPrice")
UnitPrice_Positivos<- nrow(retail[retail$UnitPrice >= 0,])
UnitPrice_Positivos
UnitPrice_Negativos<- nrow(retail[retail$UnitPrice < 0,])
UnitPrice_Negativos
kable(head(retail[retail$UnitPrice < 0,],10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
Quantity_Positivos<- nrow(retail[retail$Quantity >= 0,])
Quantity_Positivos
Quantity_Negativos<- nrow(retail[retail$Quantity < 0,])
Quantity_Negativos
kable(head(retail[retail$Quantity < 0,]),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
#datos_ge <- retail[retail$Country == 'Germany',]
datos_ge <- retail
summary(datos_ge)
kable(head(datos_ge[datos_ge$UnitPrice < 0,],10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
retail <- datos_ge[!(datos_ge$UnitPrice < 0),]
kable(head(datos_ge[datos_ge$UnitPrice < 0,],10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
kable(head(datos_ge[datos_ge$Quantity < 0,]),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
datos_ge <- datos_ge[!(datos_ge$Quantity < 0),]
kable(head(datos_ge[datos_ge$Quantity < 0,],10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
datos_ge <- datos_ge %>% drop_na(CustomerID, Description)
summary(datos_ge)
historic_invoices <- datos_ge %>%
group_by(InvoiceDay,CustomerID) %>%
summarise_at(vars(Total),funs(sum(.)))
kable(head(historic_invoices,10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
# Se procede a obtener la fecha de la ultima compra.
ultima_compra <- historic_invoices %>%
group_by(CustomerID) %>%
summarise_at(vars(InvoiceDay),funs(max(.)))
kable(head(ultima_compra,10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
colnames(ultima_compra)= c('CustomerID','UltimaCompra')
length(unique(historic_invoices$CustomerID))
length(unique(ultima_compra$CustomerID))
visitas_por_cliente <- historic_invoices %>%
group_by(CustomerID) %>%
summarise_at(vars(InvoiceDay),funs(n_distinct(.)))
colnames(visitas_por_cliente)<- c('CustomerID','CantidadVisitas')
kable(head(visitas_por_cliente,10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
length(unique(visitas_por_cliente$CustomerID))
#historic_invoices
#datos <- merge(historic_invoices, ultima_compra, by="CustomerID")
#datos2 <- merge(datos, visitas_por_cliente, by="CustomerID")
#head(datos)
#head(datos2)
total_por_cliente <- historic_invoices  %>%
group_by(CustomerID) %>%
summarise_at(vars(Total),funs(sum(.)))
kable(head(total_por_cliente,10),"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
length(unique(total_por_cliente$CustomerID))
#Se calcula la recency
#datos['Recency'] <- as.numeric(difftime(datos$UltimaCompra ,datos$InvoiceDay , units = c("days")))
ultima_compra$Recency <- as.numeric(difftime(max(ultima_compra$UltimaCompra) ,ultima_compra$UltimaCompra , units = c("days")))
head(ultima_compra)
summary(ultima_compra)
hist(ultima_compra$Recency,
main = 'Distribución de las frecuencia de las visitas',
ylab = 'Observaciones',
xlab = 'Cantidad de dias')
datos <-  merge(ultima_compra, visitas_por_cliente, by="CustomerID")
datos <- merge(datos,total_por_cliente, by="CustomerID")
head(datos)
analysis_date <- lubridate::as_date("2006-12-31", tz = "UTC")
#rfm_result <- rfm_table_order(datos,
#                              customer_id=CustomerID,
#                              order_date=UltimaCompra,
#                              revenue=Total,
#                              max(datos$UltimaCompra))
rfm_result <- rfm_table_order(historic_invoices,
customer_id=CustomerID,
order_date=InvoiceDay,
revenue=Total,
max(historic_invoices$InvoiceDay))
#summary(rfm_result)
head(rfm_result)
analysis_date <- lubridate::as_date("2006-12-31", tz = "UTC")
#rfm_result <- rfm_table_order(datos,
#                              customer_id=CustomerID,
#                              order_date=UltimaCompra,
#                              revenue=Total,
#                              max(datos$UltimaCompra))
rfm_result <- rfm_table_order(historic_invoices,
customer_id=CustomerID,
order_date=InvoiceDay,
revenue=Total,
max(historic_invoices$InvoiceDay))
#summary(rfm_result)
head(rfm_result)
analysis_date <- lubridate::as_date("2006-12-31", tz = "UTC")
#rfm_result <- rfm_table_order(datos,
#                              customer_id=CustomerID,
#                              order_date=UltimaCompra,
#                              revenue=Total,
#                              max(datos$UltimaCompra))
rfm_result <- rfm_table_order(historic_invoices,
customer_id=CustomerID,
order_date=InvoiceDay,
revenue=Total,
max(historic_invoices$InvoiceDay))
#summary(rfm_result)
rfm_result
rfm_clustering<-rfm_result$rfm[,c("recency_days","transaction_count","amount")]
rfm_clustering <- na.omit(rfm_clustering)
str(rfm_clustering)
clusters_kmedoids<-pam(rfm_clustering,3)
resultado_medoids <- data.frame(clusters_kmedoids$cluster,rfm_result$rfm)
head(resultado_medoids,20)
# cálculo del score Silhouette
score_sil<- silhouette(clusters_kmedoids,daisy(rfm_clustering))
# cálculo del valor óptimo de k usando el score silhouette
fviz_nbclust(rfm_clustering,pam,method = 'silhouette',k.max = 10)
# cálculo del valor óptimo de k usando el método del codo
fviz_nbclust(rfm_clustering,pam,method = 'wss',k.max = 10)
# cálculo del valor óptimo de k usando la estadística gap
fviz_nbclust(rfm_clustering,pam,method = 'gap_stat',k.max = 10)
# cluster al que se asignó cada individuo
clusteres_medoids <- clusters_kmedoids$clustering
#clusteres_medoids
# Descripción de los clusters
medoids <- clusters_kmedoids$medoids
medoids_df <- data.frame(cluster=c("1","2","3"),clusters_kmedoids$medoids, stringsAsFactors = FALSE)
medoids_df$Tecnica<-"KMedoids"
kable(medoids_df,"html", booktabs = T)%>%
kable_styling(latex_options = "striped")
medoids_df
# visualización de los clusters
fviz_cluster(clusters_kmedoids,data=rfm_clustering,palette='jco')
clusters_df<-data.frame(clusters=clusters_kmedoids$clustering)
ggplot(clusters_df,aes(clusters)) +
geom_bar()+
scale_y_continuous(name="Numero de Clientes", labels = scales::comma) +
labs(x="Cluster Asignado")+
ggtitle("Clientes por Cluster")
clusters <- kmeans(rfm_clustering,3,nstart=20)
clusteres_kmeans <- clusters$cluster
# crear un data frame combinando el cluster asignado y los atributos originales
resultado_kmeans <- data.frame(clusters$cluster,rfm_clustering)
head(resultado_kmeans)
#obtener cantidad de registros en cada cluster y los centroides
centroides<- data.frame(clusters$size,clusters$centers)
centroides$Tecnica<-"KMeans"
centroides$clusters.size<-NULL
centroides$cluster<-rownames(centroides)
centroides
ggplot(rfm_clustering,aes(rfm_clustering$recency_days,rfm_clustering$amount, color = clusters$cluster)) + geom_point()+
ggtitle(label='Distribución por cluster Antiguedad vs Monto de Compras') +
scale_color_viridis(option = "D") +
labs(y="Monto de las transacciones",x="Dias desde la compra más reciente")
ggplot(rfm_clustering,aes(rfm_clustering$transaction_count,rfm_clustering$amount, color = clusters$cluster)) + geom_point()+
ggtitle(label='Distribución por cluster Monto de Compras vs Cantidad de Compras') +
scale_color_viridis(option = "D") +
labs(y="Monto de las transacciones",x="Numero de compras totales")
ggplot(rfm_clustering,aes(rfm_clustering$recency_days,rfm_clustering$transaction_count, color = clusters$cluster)) + geom_point()+
ggtitle(label='Distribución por cluster Antiguedad vs Cantidad de Compras') +
scale_color_viridis(option = "D") +
labs(y="Numero de compras totales",x="Dias desde la compra más reciente")
# otra forma de visualizar los clusters
fviz_cluster(clusters,data=rfm_clustering,palette='jco',ggtheme = theme_minimal())
clusters_dfkmeans<-data.frame(clusters=clusters$cluster)
ggplot(clusters_dfkmeans,aes(clusters)) +
geom_bar()+
scale_y_continuous(name="Numero de Clientes", labels = scales::comma) +
labs(x="Cluster Asignado")+
ggtitle("Clientes por Cluster")
export_df<-rfm_result$rfm
export_df$kmedoids<-clusters_kmedoids$clustering
export_df$kmeans<-clusters$cluster
export_df<-export_df %>%
mutate(kmeans = replace(kmeans, kmeans == 2, "2 Medio Valor")) %>%
mutate(kmeans = replace(kmeans, kmeans == 3, "1 Alto Valor")) %>%
mutate(kmeans = replace(kmeans, kmeans == 1, "3 Bajo Valor")) %>%
mutate(kmedoids = replace(kmedoids, kmedoids == 3, "2 Medio Valor")) %>%
mutate(kmedoids = replace(kmedoids, kmedoids == 2, "1 Alto Valor")) %>%
mutate(kmedoids = replace(kmedoids, kmedoids == 1, "3 Bajo Valor"))
write.csv(export_df,"resultado_cluster.csv")
centroides2<-centroides %>%
mutate(cluster = replace(cluster, cluster == "2", "2 Medio Valor")) %>%
mutate(cluster = replace(cluster, cluster == "3", "1 Alto Valor")) %>%
mutate(cluster = replace(cluster, cluster == "1", "3 Bajo Valor"))
medoids_df2 <- medoids_df %>%
mutate(cluster = replace(cluster, cluster == "3", "2 Medio Valor")) %>%
mutate(cluster = replace(cluster, cluster == "2", "1 Alto Valor")) %>%
mutate(cluster = replace(cluster, cluster == "1", "3 Bajo Valor"))
export_clusters <- rbind(medoids_df2,centroides2)
write.csv(export_clusters,"centros_clusters.csv")
export_df<-rfm_result$rfm
export_df$kmedoids<-clusters_kmedoids$clustering
export_df$kmeans<-clusters$cluster
head(export_df)
export_df<-rfm_result$rfm
export_df$kmedoids<-clusters_kmedoids$clustering
export_df$kmeans<-clusters$cluster
head(export_df)
summary(export_df)
export_df<- merge(export_df,clientes_pais,by=CustomerID)
clientes_pais <- datos_ge %>%
distinct(CustomerID, Country, .keep_all = TRUE)
head(clientes_pais)
length(unique(clientes_pais$CustomerID))
clientes_pais <- datos_ge %>%
distinct(CustomerID, Country)
head(clientes_pais)
length(unique(clientes_pais$CustomerID))
clientes_pais <- datos_ge %>%
distinct(CustomerID, Country)
head(clientes_pais)
length(unique(clientes_pais$CustomerID))
length(clientes_pais)
clientes_pais <- datos_ge %>%
distinct(CustomerID, Country)
head(clientes_pais)
length(unique(clientes_pais$CustomerID))
nrow(clientes_pais)
clientes_pais <- datos_ge %>%
distinct(CustomerID, Country) %>%
filter(row_number() == 1)
head(clientes_pais)
length(unique(clientes_pais$CustomerID))
nrow(clientes_pais)
clientes_pais <- datos_ge %>%
group_by(CustomerID, Country) %>%
filter(row_number() == 1)
head(clientes_pais)
length(unique(clientes_pais$CustomerID))
nrow(clientes_pais)
clientes_pais <- datos_ge %>%
distinct(CustomerID, Country) %>%
distinct(CustomerID)
head(clientes_pais)
length(unique(clientes_pais$CustomerID))
nrow(clientes_pais)
clientes_pais <- datos_ge %>%
distinct(CustomerID, Country)
head(clientes_pais)
length(unique(clientes_pais$CustomerID))
duplicated(clientes_pais$CustomerID)
nrow(clientes_pais)
clientes_pais <- datos_ge %>%
distinct(CustomerID, Country)
head(clientes_pais)
length(unique(clientes_pais$CustomerID))
length(clientes_pais[duplicated(clientes_pais$CustomerID),])
nrow(clientes_pais)
clientes_pais <- datos_ge %>%
distinct(CustomerID, Country)
head(clientes_pais)
length(unique(clientes_pais$CustomerID))
head(clientes_pais[duplicated(clientes_pais$CustomerID),])
nrow(clientes_pais)
clientes_pais <- datos_ge %>%
distinct(CustomerID, Country)
head(clientes_pais)
length(unique(clientes_pais$CustomerID))
nrow(clientes_pais[duplicated(clientes_pais$CustomerID),])
nrow(clientes_pais)
clientes_pais <- datos_ge %>%
distinct(CustomerID, Country) %>%
distinct(CustomerID, .keep_all = TRUE)
head(clientes_pais)
length(unique(clientes_pais$CustomerID))
nrow(clientes_pais[duplicated(clientes_pais$CustomerID),])
nrow(clientes_pais)
clientes_pais <- datos_ge %>%
distinct(CustomerID, Country) %>%
distinct(CustomerID, .keep_all = TRUE)
head(clientes_pais)
export_df<-rfm_result$rfm
export_df$kmedoids<-clusters_kmedoids$clustering
export_df$kmeans<-clusters$cluster
head(export_df)
summary(export_df)
export_df<- merge(export_df,clientes_pais,by=CustomerID)
export_df<-rfm_result$rfm
export_df$kmedoids<-clusters_kmedoids$clustering
export_df$kmeans<-clusters$cluster
head(export_df)
summary(export_df)
export_df<- merge(export_df,clientes_pais,by="CustomerID")
export_df<-rfm_result$rfm
export_df$kmedoids<-clusters_kmedoids$clustering
export_df$kmeans<-clusters$cluster
head(export_df)
summary(export_df)
export_df<- merge(x=export_df,y=clientes_pais,by.x="customer_id",by.y="CustomerID")
head(export_df)
summary(export_df)
export_df<-rfm_result$rfm
export_df$kmedoids<-clusters_kmedoids$clustering
export_df$kmeans<-clusters$cluster
head(export_df)
summary(export_df)
export_df<- merge(x=export_df,y=clientes_pais,by.x="customer_id",by.y="CustomerID")
head(export_df)
summary(export_df)
export_df<-export_df %>%
mutate(kmeans = replace(kmeans, kmeans == 2, "2 Medio Valor")) %>%
mutate(kmeans = replace(kmeans, kmeans == 3, "1 Alto Valor")) %>%
mutate(kmeans = replace(kmeans, kmeans == 1, "3 Bajo Valor")) %>%
mutate(kmedoids = replace(kmedoids, kmedoids == 3, "2 Medio Valor")) %>%
mutate(kmedoids = replace(kmedoids, kmedoids == 2, "1 Alto Valor")) %>%
mutate(kmedoids = replace(kmedoids, kmedoids == 1, "3 Bajo Valor"))
write.csv(export_df,"resultado_cluster.csv")
centroides2<-centroides %>%
mutate(cluster = replace(cluster, cluster == "2", "2 Medio Valor")) %>%
mutate(cluster = replace(cluster, cluster == "3", "1 Alto Valor")) %>%
mutate(cluster = replace(cluster, cluster == "1", "3 Bajo Valor"))
medoids_df2 <- medoids_df %>%
mutate(cluster = replace(cluster, cluster == "3", "2 Medio Valor")) %>%
mutate(cluster = replace(cluster, cluster == "2", "1 Alto Valor")) %>%
mutate(cluster = replace(cluster, cluster == "1", "3 Bajo Valor"))
export_clusters <- rbind(medoids_df2,centroides2)
write.csv(export_clusters,"centros_clusters.csv")
export_df<-rfm_result$rfm
export_df$kmedoids<-clusters_kmedoids$clustering
export_df$kmeans<-clusters$cluster
head(export_df)
summary(export_df)
export_df<- merge(x=export_df,y=clientes_pais,by.x="customer_id",by.y="CustomerID")
head(export_df)
summary(export_df)
export_df<-export_df %>%
mutate(kmeans = replace(kmeans, kmeans == 2, "2 Medio Valor")) %>%
mutate(kmeans = replace(kmeans, kmeans == 3, "1 Alto Valor")) %>%
mutate(kmeans = replace(kmeans, kmeans == 1, "3 Bajo Valor")) %>%
mutate(kmedoids = replace(kmedoids, kmedoids == 3, "2 Medio Valor")) %>%
mutate(kmedoids = replace(kmedoids, kmedoids == 2, "1 Alto Valor")) %>%
mutate(kmedoids = replace(kmedoids, kmedoids == 1, "3 Bajo Valor"))
write.csv(export_df,"resultado_cluster.csv")
centroides2<-centroides %>%
mutate(cluster = replace(cluster, cluster == "2", "2 Medio Valor")) %>%
mutate(cluster = replace(cluster, cluster == "3", "1 Alto Valor")) %>%
mutate(cluster = replace(cluster, cluster == "1", "3 Bajo Valor"))
medoids_df2 <- medoids_df %>%
mutate(cluster = replace(cluster, cluster == "3", "2 Medio Valor")) %>%
mutate(cluster = replace(cluster, cluster == "2", "1 Alto Valor")) %>%
mutate(cluster = replace(cluster, cluster == "1", "3 Bajo Valor"))
export_clusters <- rbind(medoids_df2,centroides2)
write.csv(export_clusters,"centros_clusters.csv")
